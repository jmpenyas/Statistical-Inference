mn0 <- with(pm0, tapply(Sample.Value, State.Code, mean, na.rm=TRUE))
str(mn0)
mn1 <- with(pm1, tapply(Sample.Value, State.Code, mean, na.rm=TRUE))
str(mn1)
summary(mn0)
summary(mn1)
d0 <- data.frame(names(mn0, mean=mn0))
d0 <- data.frame(names(mn0), "mean"=mn0))
d0 <- data.frame(names(mn0), mn0))
d0 <- data.frame(names(mn0), mn0)
d0 <- data.frame(names(mn0), mean= mn0)
d0 <- data.frame(state=names(mn0), mean= mn0)
d1 <- data.frame(state=names(mn1), mean= mn1)
mrg <- merge(d0, d1, by="state")
dim(mrg)
head(mrg)
with(mrg, plot(rep(1,52),mrg[,2],xlim=c(.5,2.5))
)
with(mrg, points(rep(2,52),mrg[,3])
)
segments((rep(1,52),,mrg[,2],rep(2,52),mrg[,3] )
segments(rep(1,52),mrg[,2],rep(2,52),mrg[,3] )
mrg[mrg$mean.x < mrg$mean.y, ]
source('~/coursera/curso R/curso4/practica2/plot2.R')
install.packages("knitr")
install.packages("kernlab")
load(spam)
library(kernlab)
data(spam)
View(spam)
source('~/coursera/curso R/curso5/spam.R')
source('~/coursera/curso R/curso5/spam.R')
table(trainSpam$type)
plot(trainSpam$capitalAve ~trainSpam$type)
plot(log10(trainSpam$capitalAve) + 1 ~trainSpam$type)
plot(log10(trainSpam$capitalAve + 1)  ~trainSpam$type)
plot(log10(trainSpam[,1:4] + 1))
plot(hclust(dist(trainSpam[,1:57])))
plot(hclust(log10(dist(trainSpam[,1:55]))+1)
)
plot(hclust(log10(dist(trainSpam[,1:55])+1)))
source('~/coursera/curso R/curso5/spam.R')
View(glmFit)
names(trainSpam)[which.min(cvError)]
source('~/coursera/curso R/curso5/spam.R')
table(predictedSpam)
table(predictedSpam, testSpam$type)
require(knitr)
require(ggplot2)
require(dplyr)
options(scipen = 999)
knitr::opts_chunk$set(echo = TRUE)
if(!file.exists("./data/StormData.csv.bz2"))
download.file(
"https://d396qusza40orc.cloudfront.net/repdata%2Fdata%2FStormData.csv.bz2",
"./data/StormData.csv.bz2"
)
storms = read.csv("./data/StormData.csv.bz2", na.strings = "NA"
)
processedStorms = storms[, c(
"STATE__",
"BGN_DATE",
"EVTYPE",
"FATALITIES",
"INJURIES",
"PROPDMG",
"PROPDMGEXP",
"CROPDMG",
"CROPDMGEXP"
)]
# Checking the new dataset contains the information I want
dim(processedStorms)
head(processedStorms)
processedStorms$HumanDmg = processedStorms$FATALITIES + processedStorms$INJURIES
# Checking the new dataset contains the information I want
dim(processedStorms)
head(processedStorms)
multFact <- function (fact){
mult = 10^0
# Numeric factors as exponents on 10 base
if (is.numeric(fact))
mult = 10^fact
# American billions
else if (fact == "B" | fact =="b") {
mult = 10^9
}
# Millions
else if (fact == "M" | fact =="m") {
mult = 10^6
}
# Thousands
else if (fact == "T" | fact =="t") {
mult = 10^3
}
# Hundreds
else if (fact == "H" | fact =="h") {
mult = 10^2
}
# The rest of values are considered as wrong ones
else{
mult =10^0}
mult
}
# Initialazing the column
processedStorms$EconDmg = 0
# Loading the result of multiplying the dmg for its factor
for (index in nrow(processedStorms))
{
processedStorms[index, "EconDmg"] = (processedStorms[index, "PROPDMG"] * multFactprocessedStorms[index, "PROPDMGEXP"]) + (processedStorms[index, "CROPDMG"] * multFactprocessedStorms[index, "CROPDMGEXP"])
}
# Initialazing the column
processedStorms$EconDmg = 0
# Loading the result of multiplying the dmg for its factor
for (index in nrow(processedStorms))
{
processedStorms[index, "EconDmg"] = (processedStorms[index, "PROPDMG"] * multFact(processedStorms[index, "PROPDMGEXP"])) + (processedStorms[index, "CROPDMG"] * multFact(processedStorms[index, "CROPDMGEXP"]))
}
# Checking the new dataset contains the information I want
dim(processedStorms)
head(processedStorms)
if(!file.exists("./data/StormData.csv.bz2"))
download.file(
"https://d396qusza40orc.cloudfront.net/repdata%2Fdata%2FStormData.csv.bz2",
"./data/StormData.csv.bz2"
)
storms = read.csv("./data/StormData.csv.bz2", stringsAsFactors = F
)
# Initialazing the column
processedStorms$EconDmg = 0
tot =nrow(processedStorms)
# Loading the result of multiplying the dmg for its factor
for (index in nrow(processedStorms))
{
processedStorms[index, "EconDmg"] = (processedStorms[index, "PROPDMG"] * multFact(processedStorms[index, "PROPDMGEXP"])) + (processedStorms[index, "CROPDMG"] * multFact(processedStorms[index, "CROPDMGEXP"]))
}
# Checking the new dataset contains the information I want
dim(processedStorms)
head(processedStorms)
# Initialazing the column
processedStorms$EconDmg = 0
tot =nrow(processedStorms)
# Loading the result of multiplying the dmg for its factor
for (index in 1:nrow(processedStorms))
{
processedStorms[index, "EconDmg"] = (processedStorms[index, "PROPDMG"] * multFact(processedStorms[index, "PROPDMGEXP"])) + (processedStorms[index, "CROPDMG"] * multFact(processedStorms[index, "CROPDMGEXP"]))
}
require(knitr)
require(ggplot2)
require(dplyr)
options(scipen = 999)
knitr::opts_chunk$set(echo = TRUE, cache=TRUE)
# Initialazing the column
processedStorms$EconDmg = 0
# Loading the result of multiplying the dmg for its factor
for (index in 1:nrow(processedStorms))
{
processedStorms[index, "EconDmg"] = (processedStorms[index, "PROPDMG"] * multFact(processedStorms[index, "PROPDMGEXP"])) + (processedStorms[index, "CROPDMG"] * multFact(processedStorms[index, "CROPDMGEXP"]))
}
# Getting Multiplying value
PropExpValues = sapply(processedStorms$PROPDMGEXP, FUN = multFact)
# Getting Multiplying value
PropExpValues = sapply(processedStorms$PROPDMGEXP, FUN = multFact)
CropExpValues = sapply(processedStorms$CROPDMGEXP, FUN = multFact)
# Loading the result of multiplying the dmg for its factor
processedStorms$EconomicDamage = (processedStorms$PROPDMG*PropExpValues) + (processedStorms$CROPDMG*CropExpValues)
# Checking the new dataset contains the information I want
dim(processedStorms)
head(processedStorms)
unique(CropExpValues)
unique(PropExpValues)
table(CropExpValues)
multFact <- function (fact){
mult = 10^0
# Numeric factors as exponents on 10 base
if (is.numeric(fact))
mult = 10^fact
# American billions
else if (fact == "B" | fact =="b") {
mult = 10^9
}
# Millions
else if (fact == "M" | fact =="m") {
mult = 10^6
}
# Thousands
else if (fact == "K" | fact =="K") {
mult = 10^3
}
# Hundreds
else if (fact == "H" | fact =="h") {
mult = 10^2
}
# The rest of values are considered as wrong ones
else{
mult =10^0}
mult
}
# Getting Multiplying value
PropExpValues = sapply(processedStorms$PROPDMGEXP, FUN = multFact)
CropExpValues = sapply(processedStorms$CROPDMGEXP, FUN = multFact)
# Loading the result of multiplying the dmg for its factor
processedStorms$EconomicDamage = (processedStorms$PROPDMG*PropExpValues) + (processedStorms$CROPDMG*CropExpValues)
# Checking the new dataset contains the information I want
dim(processedStorms)
head(processedStorms)
View(processedStorms)
totalStorms = processedStorms %>%  group_by(EVTYPE) %>% summarise(
HumanDamage = sum(HumanDmg, na.rm = T),
EconomicDamage = sum(EconDmg, na.rm = T)
)
# Checking the new dataset contains the information I want
dim(totalStorms)
head(totalStorms)
View(totalStorms)
View(processedStorms)
install.packages("swirl")
swirl
library(swirl)
swirl()
.64
64%
64
.64/1
mypdf
mypdf(1.6)
integrate(mypdf, 0, 1.6)
1.0
sqrt(2)
0.997*0.001
0.3*99.999
(1-98.5)*(1-1)
(1-98.5)*(1-0.001)
(1-.985)*(1-0.001)
.997*.001/((1-98.5)*(1-.001)+(.997*.001))
(.997*.001) by (.997*.001 + .015*.999)
(.997*.001) / (.997*.001 + .015*.999)
3.5
expect_dice()
expect_dice
dice_high
expect_dice(high_dice)
expect_dice(dice_high)
expect_dice(dice_low)
.5*(edh + edl)
integrate(myfunc,0,2)
View(myfunc)
spop
mean(spop)
allsam
apply(allsam,1,mean)
mean(smeans)
qunif?
qunif(p,0,1)
qunif(p=f(x),0,1)
qunif(,0,1)
qunif(.75,0,1)
x <- 1:4
p <- x/sum(x)
temp <- rbind(x, p)
rownames(temp) <- c("X", "Prob")
temp
mean(x)
0.1+.4+.9.+1.6
0.1+.4+.9+1.6
.75*.3/((.75*.3)+(.48*.7)
)
library(swirl)
swirl(9)
dice_sqrÃ§
dice_sqr
ex2_fair(sum(dice_sqr*dice_fair))
ex2_fair<- sum(dice_sqr*dice_fair)
sqrt(ex2_fair)
sqrt(ex2_fair-3.5^2)
ex2_fair-3.5^2
sum(dice_sqr*dice_high) - eh^2
sum(dice_sqr*dice_high) - esh^2
sum(dice_sqr*dice_high) - edh^2
sd(apply(matrix(rnorm(10000),1000),1,mean))
1/sqrt(10)
1/sqrt(120)
sd(apply(matrix(runif(10000),1000),1,mean))
2/sqrt(10)
sd(apply(matrix(rpois(10000,4),1000),1,mean))
1/(2*sqrt(10))
sd(apply(matrix(sample(0:1,10000,TRUE),1000),1,mean))
library(swirl)
swirl()
choose(5,3)*.8^3*.2^2
for (x in 3:5) choose(5,x)*.8^x*.2^(5-x)
choose(5,3)*.8^3*.2^2+choose(5,4)*.8^4*.2^1+choose(5,5)*.8^5*.2^0
pbinom(2,5,.8,lower.tail = F)
pbinom(2,size=5,prob=.8,lower.tail=FALSE)
library(swirl)
swirl()
choose(5,3)*.8^3*.2^2+choose(5,4)*.8^4*.2^1+choose(5,5)*.8^5*.2^0
pbinom(2,size=5,prob=.8,lower.tail=FALSE)
qnorm(.1)
0
qnorm(.975, mean=3, sd=2)
qnorm(.975)*2+3
1.96*2+3
pnorm(quantile=1200, mean=1020,sd=50, lower.tail = FALSE)
pnorm(1200, mean=1020,sd=50, lower.tail = FALSE)
pnorm((1200-1020)/50, lower.tail = FALSE)
qnorm(.75, mean=1020,sd=50, lower.tail = TRUE)
.53
.53
ppois(3, 2.5*4)
pbinom(5,1000,.01)
ppois(5,1000*.01)
coinPlot(10)
coinPlot(10000)
qnorm(95)
qnorm(.95)
.6+c(-1,1)*qnorm(.975)*sqrt(.6*(.4)/100)
.6+c(-1,1)*qnorm(.975)*sqrt(.6*.4/100)
binom.test(60,100)$conf.int
mywald(.2,30)
mywald(.2)
ACCompar(20)
lamb <-  5/94.32
lamb + c(-1,1)*qnorm(.975)*sqrt(lamb)
lamb + c(-1,1)*qnorm(.975)*sqrt(lamb/94.32)
poisson.test(5,94.32)$conf
qnorm(70,mean =80, std=10)
pnorm(70,mean =80, std=10)
pnorm(70,mean =80)
pnorm(70,mean =80, sd=10)
qnorm(.95,1100,75)
qnorm(.975,1100)
pnorm(.975,1100)
rnorm(100,1100,sd=75)
qnorm(.975,mean=mean(rnorm(100,1100,sd=75),sd=75))
apply(matrix(rpois(10000,4),1000),1,mean)
.6+c(-1,1)*qnorm(.975)*sqrt(10/100)
.6+c(-1,1)*qnorm(.975,mean=1100)*sqrt(10/100)
1100+c(-1,1)*qnorm(.975,mean=1100)*sqrt(10/100)
1100+1.96/99
1100+1.96^2/99
1100+1.96^2/sqrt(99)
qnorm(.95,mean=1100,sd=75/10))
qnorm(.95,mean=1100,sd=75/10)
pnorm(3,mean=.5)
pbinom(3,5,.5,lower.tail = F)
ppois(14,15)
poisson.test(15,100)$conf
poisson.test(15,100)$conf.int
poisson.test(15,100)
poisson.test(14,100)
pnorm(14,mean=15,sd=10/10)
pnorm(16,mean=15,sd=10/10)
ppois(10,15*3)
ppois(10,15*3,log.p = T)
ppois(10,15*3)
ppois(10,5*3)
library(datasets); data(ChickWeight); library(reshape2)
wideCW <- dcast(ChickWeight, Diet + Chick ~ Time, value.var = "weight")
names(wideCW)[-(1 : 2)] <- paste("time", names(wideCW)[-(1 : 2)], sep = "")
View(wideCW)
View(ChickWeight)
View(ChickWeight)
library(dplyr)
mutate(wideCW,gain=time21 - time0)
View(wideCW)
wideCW <-  mutate(wideCW,gain=time21 - time0)
g <- ggplot(ChickWeight, aes(x = Time, y = weight,
colour = Diet, group = Chick))
g <- g + geom_line()
g <- g + stat_summary(aes(group = 1), geom = "line", fun.y = mean, size = 1, col = "black")
g <- g + facet_grid(. ~ Diet)
g
library(ggplot2)
g <- ggplot(ChickWeight, aes(x = Time, y = weight,
colour = Diet, group = Chick))
g <- g + geom_line()
g <- g + stat_summary(aes(group = 1), geom = "line", fun.y = mean, size = 1, col = "black")
g <- g + facet_grid(. ~ Diet)
g
g <- ggplot(wideCW, aes(x = factor(Diet), y = gain, fill = factor(Diet)))
g <- g + geom_violin(col = "black", size = 2)
g
g <- ggplot(wideCW, aes(x = factor(Diet), y = gain, fill = factor(Diet)))
g <- g + geom_violin(col = "black", size = 1)
g
wideCW14 <- subset(wideCW, Diet %in% c(1, 4))
rbind(
t.test(gain ~ Diet, paired = FALSE, var.equal = TRUE, data = wideCW14)$conf,
t.test(gain ~ Diet, paired = FALSE, var.equal = FALSE, data = wideCW14)$conf
)
library(UsingR); data(father.son)
t.test(father.son$sheight - father.son$fheight)
install.packages("UsingR")
library(UsingR); data(father.son)
t.test(father.son$sheight - father.son$fheight)
wideCW14 <- subset(wideCW, Diet %in% c(1, 4))
rbind(
t.test(gain ~ Diet, paired = FALSE, var.equal = TRUE, data = wideCW14)$conf,
t.test(gain ~ Diet, paired = FALSE, var.equal = FALSE, data = wideCW14)$conf
)
t.test(gain ~ Diet, paired = FALSE, var.equal = FALSE, data = wideCW14)$conf
t.test(gain ~ Diet, paired = FALSE, var.equal = FALSE, data = wideCW14)
t.test(gain ~ Diet, paired = FALSE, var.equal = TRUE, data = wideCW14)
library(swirl)
install.packages(c("dplyr", "highr", "packrat", "pillar", "purrr", "Rcpp", "rlang", "stringi", "utf8"))
install.packages(c("dplyr", "highr", "packrat", "pillar", "purrr", "Rcpp", "rlang", "stringi", "utf8"))
install.packages(c("dplyr", "highr", "packrat", "pillar", "purrr", "Rcpp", "rlang", "stringi", "utf8"))
install.packages(c("dplyr", "highr", "packrat", "pillar", "purrr", "Rcpp", "rlang", "stringi", "utf8"))
install.packages(c("dplyr", "highr", "packrat", "pillar", "purrr", "Rcpp", "rlang", "stringi", "utf8"))
install.packages(c("dplyr", "highr", "packrat", "pillar", "purrr", "Rcpp", "rlang", "stringi", "utf8"))
install.packages(c("dplyr", "highr", "packrat", "pillar", "purrr", "Rcpp", "rlang", "stringi", "utf8"))
library(swirl)
swirl()
myplot(2)
myplot(20)
myplot2(2)
qt(.975,2)
myplot2(20)
sleep
range(g1)
range(g2)
difference <- g1 - g2
difference <- g2 - g1
mean(difference)
s <- sd(difference)
mn + c(-1,1)*.95*s/sqrt(10)
mn + c(-1,1)*qt(.975,9)*s/sqrt(10)
t.test(difference)$conf
t.test(difference)$conf.int
7*15.34^2+20*18.23^2
sp <- 7*15.34^2+20*18.23^2
ns <- 27
sp <- sqrt(sp/ns)
132.86-127.44+c(-1,1)*sp/sqrt(29)
132.86-127.44+c(-1,1)*qt(.975,ns)*sp*sqrt(1/8+1/21)
var(g1-g2, 18)
var(g1, g2, 18)
sp <- sqrt((9*var(g1)+9*var(g2))/18)
md+c(-1,1)*qt(.975,18)*sp*sqrt(1/10+1/10)
t.test(g2,g1,paired = FALSE, var.equal = TRUE)
t.test(g2,g1,paired = FALSE, var.equal = TRUE)$conf
t.test(g2,g1,paired = TRUE, var.equal = TRUE)$conf
t.test(g2,g1,paired = TRUE)$conf
num <- (15.34/8+18.23/21)^2
num <- (15.34^2/8 + 18.23^2/21)^2
denom <- (15.34^2/8)^2/7 + (18.23^2/21)^2/20
den <- 15.34^4/8^2/7 + 18.23^4/21^2/20
mydf <- num/den
132.86-127.44+c(-1,1)*qt(.975,14)*sqrt(15.23^2/8+18.23^2/21)
132.86-127.44 +c(-1,1)*qt(.975,mydf)*sqrt(15.34^2/8 + 18.23^2/21)
10/sqrt(100)
z<-(32-30)/(1)
z<-(32-30)/(10/4)
15
qt(.95,15)
dim(fs)
t.test(fs$sheight-fs$fheight)
11.7885 * sd(fs$sheight-fs$fheight)/sqrt(1078)
mybin
7
mybin[7]
mybin[7]=.144 and mybin[8]=.035.
mybin[8]
info()
mybin[7:8]
mybin[8]
8
qt(q=2.5,df=15, lower.tail = FALSE)
qt(2.5,df=15, lower.tail = FALSE)
pt(2.5,df=15, lower.tail = FALSE)
qnorm(.95)
qnorm(.99)
pnorm(2)
pnorm(2, lower.tail =  FALSE)
mybin
pbinom(6, size=8, prob=.5, lower.tail=FALSE)
pbinom(7, size=8, prob=.5, lower.tail=TRUE)
ppois(9,5,lower.tail = FALSE)
x <- rnorm(9,mean=1100, sd=30)
install.packages("Rcpp")
t.test(x)
qt(95)
qt(.95)
qt(.95,8)
qt(.95,8)*30
1100 + c(-1,1)*qt(.975,8)*30/sqrt(9)
-2+ c(-1,1)*qt(.975,8)*2.1/sqrt(9)
-2+ c(-1,1)*qt(.975,8)*2.6/sqrt(9)
-2+ c(-1,1)*qt(.975,8)*.3/sqrt(9)
-2+ c(-1,1)*qt(.975,8)*1.5/sqrt(9)
3-5 +c(-1,1)*qt(.975,18)*sqrt(.6^2/10 + .68^2/10)
3-5 +c(-1,1)*qt(.95,18)*sqrt(.6^2/10 + .68^2/10)
3-5 +c(-1,1)*qt(.975,18)*sqrt(.6^2/10 + .68^2/10)
3-5 +c(-1,1)*qt(.975,18)*(.68+.6)/sqrt(20)
3-5 +c(-1,1)*qt(.975,20)*(.68+.6)/sqrt(20)
3-5 +c(-1,1)*qt(.975,18)*(.68+.6)/sqrt(20)
3-5 +c(-1,1)*qt(.975,18)*sqrt(.68*9+.6*9)/sqrt(20)
3-5 +c(-1,1)*qt(.975,18)*sqrt((.68*9+.6*9)/18)/sqrt(20)
3-5 +c(-1,1)*qt(.975,18)*sqrt((.68*9+.6*9)/18)/sqrt(1/10+1/10)
3-5 +c(-1,1)*qt(.975,18)*sqrt(((10 - 1) * .6 + (10 - 1) * .68)/(10 + 10 - 2))*(1 / 10 + 1 / 10)^.5
4-6 +c(-1,1)*qnorm(.975)*sqrt(((100 - 1) * .5 + (100 - 1) * 2)/(100 + 100 - 2))*(1 / 100 + 1 / 100)^.5
6-4 +c(-1,1)*qnorm(.975)*sqrt(((100 - 1) * .5 + (100 - 1) * 2)/(100 + 100 - 2))*(1 / 100 + 1 / 100)^.5
-3 +1.5 +c(-1,1)*qt(.95,16)*sqrt(((9 - 1) * .5 + (9 - 1) * 2)/(9 + 9 - 2))*(1 / 9 + 1 / 9)^.5
-3  -1.5 +c(-1,1)*qt(.95,16)*sqrt(((9 - 1) * .5 + (9 - 1) * 2)/(9 + 9 - 2))*(1 / 9 + 1 / 9)^.5
-3  -1.5 +c(-1,1)*qt(.90,16)*sqrt(((9 - 1) * .5 + (9 - 1) * 2)/(9 + 9 - 2))*(1 / 9 + 1 / 9)^.5
-3  -1.5 +c(-1,1)*qt(.95,16)*sqrt(((9 - 1) * 1.5 + (9 - 1) * 1.8)/(9 + 9 - 2))*(1 / 9 + 1 / 9)^.5
-3  -1.5 +c(-1,1)*qt(.95,16)*sqrt(((9 - 1) * 1.5^2 + (9 - 1) * 1.8^2)/(9 + 9 - 2))*(1 / 9 + 1 / 9)^.5
-3  -1 +c(-1,1)*qt(.95,16)*sqrt(((9 - 1) * 1.5^2 + (9 - 1) * 1.8^2)/(9 + 9 - 2))*(1 / 9 + 1 / 9)^.5
setwd("~/GitHub/Statistical-Inference")
install.packages(c("munsell", "rmarkdown", "stringi"))
unlink('project1_cache', recursive = TRUE)
unlink('project1_cache', recursive = TRUE)
